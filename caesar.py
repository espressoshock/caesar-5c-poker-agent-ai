#######################################################################
#                       ğŸ‘‘ Caesar Agent ğŸ‘‘                            #
#######################################################################

# =Imports


class Caesar:
    ###########
    #  Props  #
    ###########
    @property
    def name(self):
        return "Caesar"

    ###################
    #  Draw Strategy  #
    ###################
    # Hybrid optimized
    # monte-carlo variation
    def _mc_ev_draw(self, hand: list, M: int = 20000) -> int:
        # ======================
        # = Discards scenarios =
        # ======================
        # for speed precomputed
        # all scenarios
        # Discard   0, 1, 2,  3, 4, 5
        # C(n,r)    1, 5, 10,10, 5, 1

        discards = [
            # discard 0
            [0, 0, 0, 0, 0],
            # discard 1 (5)
            [1, 0, 0, 0, 0],
            [0, 1, 0, 0, 0],
            [0, 0, 1, 0, 0],
            [0, 0, 0, 1, 0],
            [0, 0, 0, 0, 1],
            # discard 2 (10)
            [1, 1, 0, 0, 0],
            [1, 0, 1, 0, 0],
            [1, 0, 0, 1, 0],
            [1, 0, 0, 0, 1],
            [0, 1, 1, 0, 0],
            [0, 1, 0, 1, 0],
            [0, 1, 0, 0, 1],
            [0, 0, 1, 1, 0],
            [0, 0, 1, 0, 1],
            [0, 0, 0, 1, 1],
            # discard 3 (10)
            [1, 1, 1, 0, 0],
            [1, 1, 0, 1, 0],
            [1, 1, 0, 0, 1],
            [1, 0, 0, 1, 1],
            [1, 0, 1, 0, 1],
            [1, 0, 1, 1, 0],
            [0, 1, 1, 1, 0],
            [0, 1, 0, 1, 1],
            [0, 1, 1, 0, 1],
            [0, 0, 1, 1, 1],
            # discard 4 (5)
            [1, 1, 1, 1, 0],
            [1, 1, 1, 0, 1],
            [1, 1, 0, 1, 1],
            [1, 0, 1, 1, 1],
            [0, 1, 1, 1, 1],
            # discard 5 (1)
            [1, 1, 1, 1, 1],
        ]

        # ===============
        # = Simulations =
        # ===============
        evs = [0] * len(discards)
        print("evs", evs)
        print(self._get_new_deck())

    #######################################################################
    #                                Utils                                #
    #######################################################################
    def _get_new_deck(self) -> list:
        suits = ["h", "d", "s", "c"]
        ranks = ["2", "3", "4", "5", "6", "7", "8", "9", "10", "J", "Q", "K", "A"]
        return [r + s for r in ranks for s in suits]


c = Caesar()
c._mc_ev_draw(hand=["Qs", "5h", "Ac", "8s", "4d"])
